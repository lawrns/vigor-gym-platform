// GoGym Management Platform - Database Schema
// Generated for Supabase PostgreSQL database

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum MemberStatus {
  active
  invited
  paused
  cancelled
}

enum PriceType {
  fixed
  custom
}

enum BillingCycle {
  monthly
  annual
  custom
}

enum MembershipStatus {
  draft
  active
  trial
  paused
  cancelled
  expired
}

enum BookingStatus {
  reserved
  checked_in
  no_show
  cancelled
}

enum InvoiceStatus {
  draft
  issued
  paid
  void
}

enum PaymentProvider {
  stripe
  mercadopago
}

enum PaymentStatus {
  requires_action
  succeeded
  failed
  refunded
}

enum PaymentMethodType {
  card
  bank_account
  wallet
}

enum SubscriptionStatus {
  active
  past_due
  canceled
  incomplete
  incomplete_expired
  trialing
  unpaid
}

// Auth and User Management
enum UserRole {
  owner
  manager
  staff
  member
  partner_admin
}

enum StaffRole {
  ADMIN
  TRAINER
  RECEPTIONIST
  MANAGER
  MAINTENANCE
}

model User {
  id                String    @id @default(uuid()) @db.Uuid
  email             String    @unique
  passwordHash      String    @map("password_hash")
  firstName         String    @map("first_name")
  lastName          String    @map("last_name")
  role              UserRole  @default(member)
  companyId         String?   @map("company_id") @db.Uuid
  isActive          Boolean   @default(true) @map("is_active")
  lastLoginAt       DateTime? @map("last_login_at") @db.Timestamptz
  failedLoginCount  Int       @default(0) @map("failed_login_count")
  lockedUntil       DateTime? @map("locked_until") @db.Timestamptz
  createdAt         DateTime  @default(now()) @map("created_at") @db.Timestamptz
  updatedAt         DateTime? @updatedAt @map("updated_at") @db.Timestamptz

  // Relations
  company Company? @relation(fields: [companyId], references: [id])

  @@map("users")
  @@index([email])
  @@index([companyId])
}

// Core Business Tables
model Company {
  id           String   @id @default(uuid()) @db.Uuid
  name         String
  rfc          String   @unique
  billingEmail String   @map("billing_email")
  timezone     String   @default("America/Mexico_City")
  industry     String?
  planId       String?  @map("plan_id") @db.Uuid
  createdAt    DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt    DateTime? @updatedAt @map("updated_at") @db.Timestamptz

  // Relations
  users          User[]
  members        Member[]
  staff          Staff[]
  memberships    Membership[]
  invoices       Invoice[]
  subscriptions  Subscription[]
  paymentMethods PaymentMethod[]
  devices        Device[]
  currentPlan    Plan?    @relation(fields: [planId], references: [id])

  @@map("companies")
}

model Member {
  id        String       @id @default(uuid()) @db.Uuid
  companyId String       @map("company_id") @db.Uuid
  email     String       @unique
  firstName String       @map("first_name")
  lastName  String       @map("last_name")
  status    MemberStatus @default(active)
  createdAt DateTime     @default(now()) @map("created_at") @db.Timestamptz

  // Relations
  company        Company         @relation(fields: [companyId], references: [id])
  memberships    Membership[]
  paymentMethods PaymentMethod[]

  @@map("members")
  @@index([email])
}

model Staff {
  id           String               @id @default(uuid()) @db.Uuid
  companyId    String               @map("company_id") @db.Uuid
  email        String               @unique
  firstName    String               @map("first_name")
  lastName     String               @map("last_name")
  role         StaffRole
  phone        String?
  active       Boolean              @default(true)
  hireDate     DateTime?            @map("hire_date") @db.Timestamptz
  createdAt    DateTime             @default(now()) @map("created_at") @db.Timestamptz
  updatedAt    DateTime             @updatedAt @map("updated_at") @db.Timestamptz

  // Relations
  company        Company            @relation(fields: [companyId], references: [id])
  shifts         StaffShift[]
  certifications StaffCertification[]

  @@map("staff")
  @@index([companyId])
  @@index([email])
  @@index([role])
}

model StaffShift {
  id        String    @id @default(uuid()) @db.Uuid
  staffId   String    @map("staff_id") @db.Uuid
  gymId     String?   @map("gym_id") @db.Uuid
  startTime DateTime  @map("start_time") @db.Timestamptz
  endTime   DateTime  @map("end_time") @db.Timestamptz
  notes     String?
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz

  // Relations
  staff Staff @relation(fields: [staffId], references: [id], onDelete: Cascade)
  gym   Gym?  @relation(fields: [gymId], references: [id])

  @@map("staff_shifts")
  @@index([staffId])
  @@index([gymId])
  @@index([startTime])
}

model StaffCertification {
  id          String    @id @default(uuid()) @db.Uuid
  staffId     String    @map("staff_id") @db.Uuid
  name        String
  issuer      String?
  obtainedAt  DateTime? @map("obtained_at") @db.Timestamptz
  expiresAt   DateTime? @map("expires_at") @db.Timestamptz
  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamptz

  // Relations
  staff Staff @relation(fields: [staffId], references: [id], onDelete: Cascade)

  @@map("staff_certifications")
  @@index([staffId])
  @@index([expiresAt])
}

model Plan {
  id             String       @id @default(uuid()) @db.Uuid
  code           String       @unique
  name           String
  priceType      PriceType    @map("price_type")
  priceMxnCents  Int?         @map("price_mxn_cents")
  billingCycle   BillingCycle @map("billing_cycle")
  featuresJson   Json?        @map("features_json") @db.JsonB
  stripePriceId  String?      @map("stripe_price_id")
  mpPriceId      String?      @map("mp_price_id")

  // Relations
  memberships   Membership[]
  subscriptions Subscription[]
  companies     Company[]

  @@map("plans")
}

model Membership {
  id        String           @id @default(uuid()) @db.Uuid
  memberId  String?          @map("member_id") @db.Uuid
  companyId String           @map("company_id") @db.Uuid
  planId    String           @map("plan_id") @db.Uuid
  status    MembershipStatus @default(draft)
  startsAt  DateTime?        @map("starts_at") @db.Timestamptz
  endsAt    DateTime?        @map("ends_at") @db.Timestamptz
  createdAt DateTime         @default(now()) @map("created_at") @db.Timestamptz

  // Relations
  member   Member?   @relation(fields: [memberId], references: [id])
  company  Company   @relation(fields: [companyId], references: [id])
  plan     Plan      @relation(fields: [planId], references: [id])
  visits   Visit[]
  bookings Booking[]

  @@map("memberships")
  @@index([companyId, status])
}

model Gym {
  id   String  @id @default(uuid()) @db.Uuid
  name String
  city String
  state String
  lat  Decimal @db.Decimal(9, 6)
  lng  Decimal @db.Decimal(9, 6)

  // Relations
  visits     Visit[]
  classes    Class[]
  staffShifts StaffShift[]

  @@map("gyms")
}

model Visit {
  id           String    @id @default(uuid()) @db.Uuid
  membershipId String    @map("membership_id") @db.Uuid
  gymId        String    @map("gym_id") @db.Uuid
  deviceId     String?   @map("device_id") @db.Uuid
  checkIn      DateTime  @map("check_in") @db.Timestamptz
  checkOut     DateTime? @map("check_out") @db.Timestamptz

  // Relations
  membership Membership @relation(fields: [membershipId], references: [id])
  gym        Gym        @relation(fields: [gymId], references: [id])
  device     Device?    @relation(fields: [deviceId], references: [id])

  @@map("visits")
  @@index([membershipId, checkIn])
  @@index([deviceId])
}

model Device {
  id               String    @id @default(uuid()) @db.Uuid
  companyId        String    @map("company_id") @db.Uuid
  name             String
  deviceSecretHash String    @map("device_secret_hash")
  lastSeenAt       DateTime? @map("last_seen_at") @db.Timestamptz
  locationId       String?   @map("location_id") @db.Uuid
  createdAt        DateTime  @default(now()) @map("created_at") @db.Timestamptz
  updatedAt        DateTime? @updatedAt @map("updated_at") @db.Timestamptz

  // Relations
  company  Company         @relation(fields: [companyId], references: [id])
  sessions DeviceSession[]
  visits   Visit[]

  @@map("devices")
  @@index([companyId])
  @@index([lastSeenAt])
}

model DeviceSession {
  id        String   @id @default(uuid()) @db.Uuid
  deviceId  String   @map("device_id") @db.Uuid
  jwtId     String   @unique @map("jwt_id")
  expiresAt DateTime @map("expires_at") @db.Timestamptz
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz

  // Relations
  device Device @relation(fields: [deviceId], references: [id], onDelete: Cascade)

  @@map("device_sessions")
  @@index([deviceId])
  @@index([expiresAt])
}

model Class {
  id       String   @id @default(uuid()) @db.Uuid
  gymId    String   @map("gym_id") @db.Uuid
  title    String
  startsAt DateTime @map("starts_at") @db.Timestamptz
  capacity Int

  // Relations
  gym      Gym       @relation(fields: [gymId], references: [id])
  bookings Booking[]

  @@map("classes")
}

model Booking {
  id           String        @id @default(uuid()) @db.Uuid
  classId      String        @map("class_id") @db.Uuid
  membershipId String        @map("membership_id") @db.Uuid
  status       BookingStatus @default(reserved)
  createdAt    DateTime      @default(now()) @map("created_at") @db.Timestamptz

  // Relations
  class      Class      @relation(fields: [classId], references: [id])
  membership Membership @relation(fields: [membershipId], references: [id])

  @@map("bookings")
}

model Invoice {
  id             String        @id @default(uuid()) @db.Uuid
  companyId      String        @map("company_id") @db.Uuid
  cfdiUuid       String?       @unique @map("cfdi_uuid")
  status         InvoiceStatus @default(draft)
  totalMxnCents  Int           @map("total_mxn_cents")
  issuedAt       DateTime?     @map("issued_at") @db.Timestamptz

  // Relations
  company  Company   @relation(fields: [companyId], references: [id])
  payments Payment[]

  @@map("invoices")
}

model Payment {
  id            String        @id @default(uuid()) @db.Uuid
  invoiceId     String        @map("invoice_id") @db.Uuid
  provider      PaymentProvider
  providerRef   String        @map("provider_ref")
  status        PaymentStatus @default(requires_action)
  paidMxnCents  Int           @map("paid_mxn_cents")
  createdAt     DateTime      @default(now()) @map("created_at") @db.Timestamptz

  // Relations
  invoice Invoice @relation(fields: [invoiceId], references: [id])

  @@map("payments")
}

model Subscription {
  id                String             @id @default(uuid()) @db.Uuid
  companyId         String             @map("company_id") @db.Uuid
  planId            String             @map("plan_id") @db.Uuid
  provider          PaymentProvider
  externalId        String             @map("external_id")
  status            SubscriptionStatus @default(active)
  currentPeriodEnd  DateTime?          @map("current_period_end") @db.Timestamptz
  cancelAtPeriodEnd Boolean            @default(false) @map("cancel_at_period_end")
  createdAt         DateTime           @default(now()) @map("created_at") @db.Timestamptz
  updatedAt         DateTime?          @updatedAt @map("updated_at") @db.Timestamptz

  // Relations
  company Company @relation(fields: [companyId], references: [id])
  plan    Plan    @relation(fields: [planId], references: [id])

  @@map("subscriptions")
  @@unique([provider, externalId])
  @@index([companyId])
  @@index([status])
}

model PaymentMethod {
  id                     String            @id @default(uuid()) @db.Uuid
  companyId              String            @map("company_id") @db.Uuid
  memberId               String?           @map("member_id") @db.Uuid
  type                   PaymentMethodType
  brand                  String?           // 'visa', 'mastercard', etc.
  last4                  String?           // Last 4 digits
  stripePaymentMethodId  String?           @unique @map("stripe_payment_method_id")
  isDefault              Boolean           @default(false) @map("is_default")
  createdAt              DateTime          @default(now()) @map("created_at") @db.Timestamptz
  updatedAt              DateTime?         @updatedAt @map("updated_at") @db.Timestamptz

  // Relations
  company Company @relation(fields: [companyId], references: [id])
  member  Member? @relation(fields: [memberId], references: [id])

  @@map("payment_methods")
  @@index([companyId])
  @@index([memberId])
  @@index([isDefault])
}

model WebhookEvent {
  id        String   @id @default(uuid()) @db.Uuid
  provider  String   // 'stripe' | 'mercadopago'
  eventId   String   @unique @map("event_id")
  eventType String   @map("event_type")
  processed Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz

  @@map("webhook_events")
  @@index([provider, processed])
}

model AuditLog {
  id        String   @id @default(uuid()) @db.Uuid
  actorId   String?  @map("actor_id") @db.Uuid
  action    String
  target    String
  meta      Json?    @db.JsonB
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz

  @@map("audit_logs")
}
