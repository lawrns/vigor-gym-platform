name: Performance & Observability

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  WEB_ORIGIN: http://localhost:7777
  API_ORIGIN: http://localhost:4001
  NODE_ENV: test

jobs:
  lighthouse-ci:
    name: Lighthouse CI
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build application
        run: npm run build
        working-directory: apps/web
      
      - name: Run Lighthouse CI
        run: |
          npm install -g @lhci/cli
          lhci autorun --upload.target=temporary-public-storage
        working-directory: apps/web
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

      - name: Upload Lighthouse results
        uses: actions/upload-artifact@v4
        with:
          name: lighthouse-results
          path: apps/web/.lighthouseci/
          retention-days: 1
        if: always()

  k6-smoke:
    name: k6 Smoke Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Start services
        run: |
          npm run dev &
          sleep 30 # Wait for services to start
        working-directory: apps/web
      
      - name: Install k6
        run: |
          sudo gpg -k
          sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6
      
      - name: Run k6 smoke tests
        run: k6 run tests/k6/smoke.js
        working-directory: apps/web
        env:
          WEB_ORIGIN: ${{ env.WEB_ORIGIN }}
          API_ORIGIN: ${{ env.API_ORIGIN }}

  k6-load:
    name: k6 Load Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Start services
        run: |
          npm run dev &
          sleep 30
        working-directory: apps/web
      
      - name: Install k6
        run: |
          sudo gpg -k
          sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6
      
      - name: Run k6 load tests
        run: k6 run --vus 50 --duration 5m tests/k6/load.js
        working-directory: apps/web
        env:
          WEB_ORIGIN: ${{ env.WEB_ORIGIN }}
          API_ORIGIN: ${{ env.API_ORIGIN }}

  playwright-e2e:
    name: Playwright E2E Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Install Playwright browsers
        run: npx playwright install --with-deps
        working-directory: apps/web
      
      - name: Start services
        run: |
          npm run dev &
          sleep 30
        working-directory: apps/web
      
      - name: Run Playwright tests
        run: npm run test:e2e
        working-directory: apps/web
        env:
          WEB_ORIGIN: ${{ env.WEB_ORIGIN }}
      
      - name: Upload Playwright report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: apps/web/playwright-report/
          retention-days: 30

  otel-validate:
    name: OpenTelemetry Validation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Start services with OTEL
        run: |
          export OTEL_EXPORTER_OTLP_ENDPOINT=http://localhost:4318
          npm run dev &
          sleep 30
        working-directory: apps/web
      
      - name: Validate OTEL instrumentation
        run: node scripts/otel-smoke.mjs
        working-directory: apps/web
        env:
          WEB_ORIGIN: ${{ env.WEB_ORIGIN }}

  asset-audit:
    name: Asset Size Audit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run asset size audit
        run: node scripts/optimize-images.mjs --ci
        working-directory: apps/web

      - name: Check for oversized assets
        run: |
          echo "Checking for assets > 400KB..."

          # Find files larger than 400KB in public directory
          oversized=$(find apps/web/public -type f \( -name "*.png" -o -name "*.jpg" -o -name "*.jpeg" -o -name "*.webp" -o -name "*.avif" \) -size +400k)

          if [ -n "$oversized" ]; then
            echo "❌ Found oversized assets (>400KB):"
            echo "$oversized" | while read file; do
              size=$(du -h "$file" | cut -f1)
              echo "  - $file ($size)"
            done
            echo ""
            echo "Please optimize these assets or add them to the whitelist."
            exit 1
          else
            echo "✅ All assets are within size limits"
          fi

  performance-budget:
    name: Performance Budget Check
    runs-on: ubuntu-latest
    needs: [lighthouse-ci, k6-smoke, asset-audit]
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Download Lighthouse artifacts
        uses: actions/download-artifact@v4
        with:
          name: lighthouse-results
          path: apps/web/.lighthouseci/
        continue-on-error: true

      - name: Run performance budget validation
        run: node scripts/validate-performance-budget.mjs
        working-directory: apps/web
        env:
          CI: true

  notify-slack:
    name: Notify Slack
    runs-on: ubuntu-latest
    needs: [lighthouse-ci, k6-smoke, k6-load, playwright-e2e, otel-validate, asset-audit]
    if: always() && github.ref == 'refs/heads/main'
    steps:
      - name: Notify Slack
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#performance'
          text: |
            Performance pipeline completed for ${{ github.sha }}
            
            Results:
            - Lighthouse CI: ${{ needs.lighthouse-ci.result }}
            - k6 Smoke: ${{ needs.k6-smoke.result }}
            - k6 Load: ${{ needs.k6-load.result }}
            - Playwright E2E: ${{ needs.playwright-e2e.result }}
            - OTEL Validation: ${{ needs.otel-validate.result }}
            - Asset Audit: ${{ needs.asset-audit.result }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
